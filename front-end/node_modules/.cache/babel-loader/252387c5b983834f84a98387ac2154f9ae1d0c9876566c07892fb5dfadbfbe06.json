{"ast":null,"code":"export default {\n  namespace: true,\n  state: {\n    count: [],\n    stateOk: [],\n    stateFail: [],\n    angleId: null,\n    predicts: [],\n    predict_values: []\n  },\n  mutations: {\n    count: (state, data) => {\n      state.count = data;\n    },\n    stateOk: (state, data) => {\n      state.stateOk = data;\n    },\n    stateFail: (state, data) => {\n      state.stateFail = data;\n    },\n    angleId: (state, data) => {\n      state.angleId = data;\n    },\n    predicts: (state, data) => {\n      state.predicts = data;\n    },\n    predict_values: (state, data) => {\n      state.predict_values = data;\n    }\n  },\n  getters: {\n    getCount(state) {\n      return state.count;\n    },\n    getStateOk(state) {\n      return state.stateOk;\n    },\n    getStateFail(state) {\n      return state.stateFail;\n    },\n    getAngleId(state) {\n      return state.angleId;\n    },\n    getPredicts(state) {\n      return state.predicts;\n    },\n    getPredict_values(state) {\n      return state.predict_values;\n    }\n  },\n  actions: {\n    count(context, data) {\n      context.commit('count', data);\n    },\n    stateOk(context, data) {\n      context.commit('stateOk', data);\n    },\n    stateFail(context, data) {\n      context.commit('stateFail', data);\n    },\n    angleId(context, data) {\n      context.commit('angleId', data);\n    },\n    predicts(context, data) {\n      context.commit('predicts', data);\n    },\n    predict_values(context, data) {\n      context.commit('predict_values', data);\n    }\n  }\n};","map":{"version":3,"names":["namespace","state","count","stateOk","stateFail","angleId","predicts","predict_values","mutations","data","getters","getCount","getStateOk","getStateFail","getAngleId","getPredicts","getPredict_values","actions","context","commit"],"sources":["/app/src/storage/ChartDashboard.js"],"sourcesContent":["export default {\n    namespace: true,\n    state: {\n        count: [],\n        stateOk: [],\n        stateFail: [],\n        angleId: null,\n        predicts:[],\n        predict_values:[]\n    },\n    mutations: {\n\n        count: (state, data) => {\n            state.count = data\n        },\n        stateOk: (state, data) => {\n            state.stateOk = data\n        },\n        stateFail: (state, data) => {\n            state.stateFail = data\n        },\n        angleId: (state, data) => {\n            state.angleId = data\n        },\n        predicts: (state, data) => {\n            state.predicts = data\n        },\n        predict_values: (state, data) => {\n            state.predict_values = data\n        }\n    },\n    getters: {\n        getCount(state) {\n            return state.count\n        },\n        getStateOk(state) {\n            return state.stateOk\n        },\n        getStateFail(state) {\n            return state.stateFail\n        },\n        getAngleId(state) {\n            return state.angleId\n        },\n        getPredicts(state) {\n            return state.predicts\n        },\n        getPredict_values(state) {\n            return state.predict_values\n        }\n    },\n    actions: {\n        count(context, data) {\n            context.commit('count', data)\n        },\n        stateOk(context, data) {\n            context.commit('stateOk', data)\n        },\n        stateFail(context, data) {\n            context.commit('stateFail', data)\n        },\n        angleId(context, data) {\n            context.commit('angleId', data)\n        },\n        predicts(context, data) {\n            context.commit('predicts', data)\n        },\n        predict_values(context, data) {\n            context.commit('predict_values', data)\n        }\n    }\n}"],"mappings":"AAAA,eAAe;EACXA,SAAS,EAAE,IAAI;EACfC,KAAK,EAAE;IACHC,KAAK,EAAE,EAAE;IACTC,OAAO,EAAE,EAAE;IACXC,SAAS,EAAE,EAAE;IACbC,OAAO,EAAE,IAAI;IACbC,QAAQ,EAAC,EAAE;IACXC,cAAc,EAAC;EACnB,CAAC;EACDC,SAAS,EAAE;IAEPN,KAAK,EAAEA,CAACD,KAAK,EAAEQ,IAAI,KAAK;MACpBR,KAAK,CAACC,KAAK,GAAGO,IAAI;IACtB,CAAC;IACDN,OAAO,EAAEA,CAACF,KAAK,EAAEQ,IAAI,KAAK;MACtBR,KAAK,CAACE,OAAO,GAAGM,IAAI;IACxB,CAAC;IACDL,SAAS,EAAEA,CAACH,KAAK,EAAEQ,IAAI,KAAK;MACxBR,KAAK,CAACG,SAAS,GAAGK,IAAI;IAC1B,CAAC;IACDJ,OAAO,EAAEA,CAACJ,KAAK,EAAEQ,IAAI,KAAK;MACtBR,KAAK,CAACI,OAAO,GAAGI,IAAI;IACxB,CAAC;IACDH,QAAQ,EAAEA,CAACL,KAAK,EAAEQ,IAAI,KAAK;MACvBR,KAAK,CAACK,QAAQ,GAAGG,IAAI;IACzB,CAAC;IACDF,cAAc,EAAEA,CAACN,KAAK,EAAEQ,IAAI,KAAK;MAC7BR,KAAK,CAACM,cAAc,GAAGE,IAAI;IAC/B;EACJ,CAAC;EACDC,OAAO,EAAE;IACLC,QAAQA,CAACV,KAAK,EAAE;MACZ,OAAOA,KAAK,CAACC,KAAK;IACtB,CAAC;IACDU,UAAUA,CAACX,KAAK,EAAE;MACd,OAAOA,KAAK,CAACE,OAAO;IACxB,CAAC;IACDU,YAAYA,CAACZ,KAAK,EAAE;MAChB,OAAOA,KAAK,CAACG,SAAS;IAC1B,CAAC;IACDU,UAAUA,CAACb,KAAK,EAAE;MACd,OAAOA,KAAK,CAACI,OAAO;IACxB,CAAC;IACDU,WAAWA,CAACd,KAAK,EAAE;MACf,OAAOA,KAAK,CAACK,QAAQ;IACzB,CAAC;IACDU,iBAAiBA,CAACf,KAAK,EAAE;MACrB,OAAOA,KAAK,CAACM,cAAc;IAC/B;EACJ,CAAC;EACDU,OAAO,EAAE;IACLf,KAAKA,CAACgB,OAAO,EAAET,IAAI,EAAE;MACjBS,OAAO,CAACC,MAAM,CAAC,OAAO,EAAEV,IAAI,CAAC;IACjC,CAAC;IACDN,OAAOA,CAACe,OAAO,EAAET,IAAI,EAAE;MACnBS,OAAO,CAACC,MAAM,CAAC,SAAS,EAAEV,IAAI,CAAC;IACnC,CAAC;IACDL,SAASA,CAACc,OAAO,EAAET,IAAI,EAAE;MACrBS,OAAO,CAACC,MAAM,CAAC,WAAW,EAAEV,IAAI,CAAC;IACrC,CAAC;IACDJ,OAAOA,CAACa,OAAO,EAAET,IAAI,EAAE;MACnBS,OAAO,CAACC,MAAM,CAAC,SAAS,EAAEV,IAAI,CAAC;IACnC,CAAC;IACDH,QAAQA,CAACY,OAAO,EAAET,IAAI,EAAE;MACpBS,OAAO,CAACC,MAAM,CAAC,UAAU,EAAEV,IAAI,CAAC;IACpC,CAAC;IACDF,cAAcA,CAACW,OAAO,EAAET,IAAI,EAAE;MAC1BS,OAAO,CAACC,MAAM,CAAC,gBAAgB,EAAEV,IAAI,CAAC;IAC1C;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}