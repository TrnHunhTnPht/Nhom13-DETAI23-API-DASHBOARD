{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Navbar from \"../../AppNav.vue\";\nimport RadarChart from \"./charts/RardarChart.vue\";\nimport BarChart from \"./charts/BarChart.vue\";\nimport axios from \"axios\";\nimport { CHART_DATA, TODAY_USERS, NEW_CLIENTS, STATE_OK, TOTAL_CHECK_TIME } from \"@/axios\";\nexport default {\n  name: \"DashboardPage\",\n  components: {\n    Navbar,\n    RadarChart,\n    BarChart\n  },\n  data() {\n    return {\n      today_user: {\n        count: 0,\n        percent: 0,\n        total: false\n      },\n      new_clients: {\n        newClients: 0,\n        percent: 0,\n        total: false\n      },\n      state_ok: {\n        state: 0,\n        percent: 0\n      },\n      total_check_time: {\n        interval: null,\n        time: null,\n        total: 0\n      },\n      role: localStorage.getItem(\"role\")\n    };\n  },\n  mounted() {\n    if (localStorage.getItem(\"id\") == null || localStorage.getItem(\"access_token\") == null) {\n      this.$router.push({\n        name: \"Signin\"\n      });\n    }\n  },\n  beforeDestroy() {\n    // prevent memory leak\n    clearInterval(this.total_check_time.interval);\n  },\n  async created() {\n    document.title = \"Dashboard\";\n    this.$store.commit(\"isDashboard\");\n    this.total_check_time.today = new Date().toLocaleString();\n    if (localStorage.getItem(\"role\") == 0) {\n      await axios.get(TODAY_USERS, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"access_token\")}`\n        }\n      }).then(res => {\n        if (res.status == 200) {\n          this.today_user.count = res.data.todayUsers;\n          this.today_user.percent = res.data.percent;\n          this.today_user.total = res.data.total;\n        }\n      }).catch(ex => {\n        console.log(ex);\n      });\n      await axios.get(NEW_CLIENTS).then(res => {\n        if (res.status == 200) {\n          this.new_clients.newClients = res.data.newClients;\n          this.new_clients.percent = res.data.percent;\n        }\n      }).catch(ex => {\n        console.log(ex);\n      });\n    }\n    await axios.get(STATE_OK).then(res => {\n      if (res.status == 200) {\n        this.state_ok.state = res.data.state_ok;\n        this.state_ok.percent = res.data.percent;\n      }\n    }).catch(ex => {\n      console.log(ex);\n    });\n    await axios.get(TOTAL_CHECK_TIME).then(res => {\n      if (res.status == 200) {\n        this.total_check_time.total = res.data.total_check;\n      }\n    }).catch(ex => {\n      console.log(ex);\n    });\n    const {\n      data\n    } = await axios.get(CHART_DATA);\n    this.$store.dispatch(\"count\", data.count);\n    this.$store.dispatch(\"stateOk\", data.stateOk);\n    this.$store.dispatch(\"stateFail\", data.stateFail);\n\n    // update the time every second\n    this.total_check_time.interval = setInterval(() => {\n      // Concise way to format time according to system locale.\n      // In my case this returns \"3:48:00 am\"\n      this.total_check_time.time = Intl.DateTimeFormat(navigator.language, {\n        year: \"numeric\",\n        month: \"numeric\",\n        date: \"numeric\",\n        hour: \"numeric\",\n        minute: \"numeric\",\n        second: \"numeric\"\n      }).format();\n    }, 1000);\n  }\n};","map":{"version":3,"names":["Navbar","RadarChart","BarChart","axios","CHART_DATA","TODAY_USERS","NEW_CLIENTS","STATE_OK","TOTAL_CHECK_TIME","name","components","data","today_user","count","percent","total","new_clients","newClients","state_ok","state","total_check_time","interval","time","role","localStorage","getItem","mounted","$router","push","beforeDestroy","clearInterval","created","document","title","$store","commit","today","Date","toLocaleString","get","headers","Authorization","then","res","status","todayUsers","catch","ex","console","log","total_check","dispatch","stateOk","stateFail","setInterval","Intl","DateTimeFormat","navigator","language","year","month","date","hour","minute","second","format"],"sources":["src/components/views/Home/Dashboard.vue"],"sourcesContent":["<template>\n  <div>\n    <Navbar />\n    <div class=\"dashboard-contain-top\">\n      <div class=\"contain-top-child\" v-if=\"this.role==0\">\n        <div class=\"contain-top-child-left\">\n          <p class=\"title\">today's users</p>\n          <p class=\"main\">{{ this.today_user.count }}</p>\n          <div class=\"desc\" v-if=\"this.today_user.total === false\">\n            <p class=\"desc-percent\">{{ this.today_user.percent }}%</p>\n            <p class=\"desc-content\">since last week</p>\n          </div>\n          <div class=\"desc\" v-else>\n            <p class=\"desc-percent\">{{ this.today_user.percent }}%</p>\n            <p class=\"desc-content\">compared with total</p>\n          </div>\n        </div>\n        <div class=\"contain-top-child-right\" style=\"background-color: #de3163\">\n          <font-awesome-icon\n            icon=\"fa-solid fa-users\"\n            size=\"2xl\"\n            style=\"color: white\"\n          />\n        </div>\n      </div>\n      <div class=\"contain-top-child\" v-if=\"this.role==0\">\n        <div class=\"contain-top-child-left\">\n          <p class=\"title\">new client</p>\n          <p class=\"main\">{{ this.new_clients.newClients }}</p>\n          <div class=\"desc\" v-if=\"this.new_clients.percent != -1\">\n            <p class=\"desc-percent\">{{ this.new_clients.percent }}%</p>\n            <p class=\"desc-content\">since last quarter</p>\n          </div>\n          <div class=\"desc\" v-else>\n            <p class=\"desc-percent\"></p>\n            <p class=\"desc-content\">In this quarter</p>\n          </div>\n        </div>\n        <div class=\"contain-top-child-right\" style=\"background-color: #fe8f21\">\n          <font-awesome-icon\n            icon=\"fa-solid fa-user-plus\"\n            size=\"2xl\"\n            style=\"color: white\"\n          />\n        </div>\n      </div>\n      <div class=\"contain-top-child\">\n        <div class=\"contain-top-child-left\">\n          <p class=\"title\">Status Success</p>\n          <p class=\"main\">{{ this.state_ok.state }}</p>\n          <div class=\"desc\">\n            <p class=\"desc-percent\">{{ this.state_ok.percent }}%</p>\n            <p class=\"desc-content\">compared with total</p>\n          </div>\n        </div>\n        <div class=\"contain-top-child-right\" style=\"background-color: #2e8364\">\n          <font-awesome-icon\n            icon=\"fa-solid fa-globe\"\n            size=\"2xl\"\n            style=\"color: white\"\n          />\n        </div>\n      </div>\n      <div class=\"contain-top-child\">\n        <div class=\"contain-top-child-left\">\n          <p class=\"title\">Total check times</p>\n          <p class=\"main\">{{ this.total_check_time.total }}</p>\n          <div class=\"desc\">\n            <p class=\"desc-percent\"></p>\n            <p class=\"desc-content\">To {{ this.total_check_time.time }}</p>\n          </div>\n        </div>\n        <div class=\"contain-top-child-right\" style=\"background-color: #007bff\">\n          <font-awesome-icon\n            icon=\"fa-solid fa-clipboard-check\"\n            size=\"2xl\"\n            style=\"color: white\"\n          />\n        </div>\n      </div>\n    </div>\n    <div class=\"dashboard-contain-main\">\n      <div class=\"contain-main-child-left\">\n        <p class=\"h1\">Check times by angle id</p>\n        <br />\n        <BarChart />\n      </div>\n      <div class=\"contain-main-child-right\">\n        <p class=\"h1\">Router's state by angle id</p>\n        <br />\n        <RadarChart />\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport Navbar from \"../../AppNav.vue\";\nimport RadarChart from \"./charts/RardarChart.vue\";\nimport BarChart from \"./charts/BarChart.vue\";\nimport axios from \"axios\";\nimport {\n  CHART_DATA,\n  TODAY_USERS,\n  NEW_CLIENTS,\n  STATE_OK,\n  TOTAL_CHECK_TIME,\n} from \"@/axios\";\n\nexport default {\n  name: \"DashboardPage\",\n  components: {\n    Navbar,\n    RadarChart,\n    BarChart,\n  },\n  data() {\n    return {\n      today_user: {\n        count: 0,\n        percent: 0,\n        total: false,\n      },\n      new_clients: {\n        newClients: 0,\n        percent: 0,\n        total: false,\n      },\n      state_ok: {\n        state: 0,\n        percent: 0,\n      },\n      total_check_time: {\n        interval: null,\n        time: null,\n        total: 0,\n      },\n      role: localStorage.getItem(\"role\"),\n    };\n  },\n  mounted() {\n    if (\n      localStorage.getItem(\"id\") == null ||\n      localStorage.getItem(\"access_token\") == null\n    ) {\n      this.$router.push({ name: \"Signin\" });\n    }\n  },\n  beforeDestroy() {\n    // prevent memory leak\n    clearInterval(this.total_check_time.interval);\n  },\n  async created() {\n    document.title = \"Dashboard\";\n    this.$store.commit(\"isDashboard\");\n\n    this.total_check_time.today = new Date().toLocaleString();\n\n    if (localStorage.getItem(\"role\") == 0) {\n      await axios\n        .get(TODAY_USERS, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"access_token\")}`,\n          },\n        })\n        .then((res) => {\n          if (res.status == 200) {\n            this.today_user.count = res.data.todayUsers;\n            this.today_user.percent = res.data.percent;\n            this.today_user.total = res.data.total;\n          }\n        })\n        .catch((ex) => {\n          console.log(ex);\n        });\n\n      await axios\n        .get(NEW_CLIENTS)\n        .then((res) => {\n          if (res.status == 200) {\n            this.new_clients.newClients = res.data.newClients;\n            this.new_clients.percent = res.data.percent;\n          }\n        })\n        .catch((ex) => {\n          console.log(ex);\n        });\n    }\n\n    await axios\n      .get(STATE_OK)\n      .then((res) => {\n        if (res.status == 200) {\n          this.state_ok.state = res.data.state_ok;\n          this.state_ok.percent = res.data.percent;\n        }\n      })\n      .catch((ex) => {\n        console.log(ex);\n      });\n\n    await axios\n      .get(TOTAL_CHECK_TIME)\n      .then((res) => {\n        if (res.status == 200) {\n          this.total_check_time.total = res.data.total_check;\n        }\n      })\n      .catch((ex) => {\n        console.log(ex);\n      });\n\n    const { data } = await axios.get(CHART_DATA);\n\n    this.$store.dispatch(\"count\", data.count);\n    this.$store.dispatch(\"stateOk\", data.stateOk);\n    this.$store.dispatch(\"stateFail\", data.stateFail);\n\n    // update the time every second\n    this.total_check_time.interval = setInterval(() => {\n      // Concise way to format time according to system locale.\n      // In my case this returns \"3:48:00 am\"\n      this.total_check_time.time = Intl.DateTimeFormat(navigator.language, {\n        year: \"numeric\",\n        month: \"numeric\",\n        date: \"numeric\",\n        hour: \"numeric\",\n        minute: \"numeric\",\n        second: \"numeric\",\n      }).format();\n    }, 1000);\n  },\n};\n</script>\n<style>\n@import url(\"../../../assets/css/nav-style.css\");\n@import url(\"../../../assets/css/dashboard-style.css\");\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}